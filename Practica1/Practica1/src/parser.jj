options
{
    STATIC = false;
}

PARSER_BEGIN(Parser)

import java.io.*;
import java.net.*;
import java.util.*;
import javax.xml.parsers.*;
import javax.xml.stream.XMLOutputFactory;
import javax.xml.stream.XMLStreamException;
import javax.xml.stream.XMLStreamWriter;

public class Parser implements ParserConstants {

    // URL donde obtener empresas y cotizaciones "actuales"
    private final static String URL = "http://www.infobolsa.es/acciones/ibex35";
    // Fichero donde obtener empresas y cotizaciones "obsoletas"
    private final static String FICHERO = "cotizacion.xml";

    /// Función para leer una tabla de cotizaciones del FICHERO
    Hashtable <String, Double> leeTablaDeFichero(String fichero) {
        try {
            // Lectura del FICHERO utilizando SAXParser
            SAXParser saxParser = SAXParserFactory.newInstance().newSAXParser();
            CotizacionesHandler handler = new CotizacionesHandler();
            saxParser.parse(new File(FICHERO, handler));
            return handler.getTabla();
        } catch (Exception e) {
            // En caso de excepción (no existe el fichero, etc) --> Tabla vacía
            return new Hashtable<String, Double> ();
        }
    }

    /// Función para escribir la tabla de cotizaciones en el FICHERO
    void escribeTablaEnFichero(Hashtable <String, Double> tabla, String nombre) {
        PrintStream out = null;
        XMLOutputFactory xof = XMLOutputFactory.newInstance();
        XMLStreamWriter xsw = null;
        try {
            // Escribir la tabla en el fichero FICHERO
            out = new PrintStream(nombre);
            xsw = xof.createXMLStreamWriter(out);
            // Escribimos el fichero
            escrituraFichero(xsw, tabla);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    /// Función interna para escribir la tabla de cotizaciones con un XMLStreamWriter
    private void escrituraFichero(XMLStreamWriter xsw, Hashtable<String, Double> tabla) throws XMLStreamException {
        xsw.writeStartDocument();
        xsw.writeStartElement("cotizaciones");
        // Para cada elemento de la lista creamos un elemento dentro del fichero
        for (Map.Entry<String, Double> el : tabla.entrySet()) {
            xsw.writeStartElement("cotizacion");

            xsw.writeStartElement("empresa");
            xsw.writeCharacters(el.getKey());
            xsw.writeEndElement();

            xsw.writeStartElement("cotizaciones");
            xsw.writeCharacters(el.getValue().toString());
            xsw.writeEndElement();

            xsw.writeEndElement();
        }
        xsw.writeEndElement();
        xsw.writeEndDocument();
    }

    public static void main(String args []) {
        try {
            // Entrada de datos de la web
            InputStreamReader stream = new InputStreamReader(URL, "UTF-8");
            Parser parser = new Parser(stream);
            Hashtable<String, Double> tablaCotizaciones = parser.leeTablaCotizaciones();

            // Entrada de datos de teclado
            System.out.println("Introduzca el nombre de una empresa del IBEX 35: ");
            Scanner scanner = new Scanner(System.in);
            String empresa = scanner.nextLine();

            // Entrada de datos de fichero
            Hashtable<String, Double> tablaAnterior = parser.leeTablaDeFichero(FICHERO);

            // Diferencia de precios
            // TODO: Calculo de la diferencia de precios
            Double cotizacionAnterior = tablaAnterior.get(empresa);
            if (cotizacionAnterior!= null) {
                // Existe una cotizacion anterior
                // TODO: Hacer una comparacion tipo -> La cotizacion ha subido X puntos
            }
            // TODO: Mostrar la cotizacion actual de la empresa

            // Salvamos los resultados en fichero
            parser.escribeTablaEnFichero(tablaCotizaciones, FICHERO);
        } catch (Exception e) {
            System.out.println("Exception " + e.getMessage());
        } catch (Error e) {
            System.out.println("Error " + e.getMessage());
        }
    }
}}
}

PARSER_END(Parser)

SKIP :
{
    " "
    | "\r"
    | "\t"
    | "\n"
}

TOKEN :
{
    < CABECERA : "<!DOCTYPE html>" >
    | < HTML : "<html>" >
    | < HTML_FIN : "</html>" >
    | < HEAD : "<head>" >
    | < HEAD_FIN : "</head>" >
    | < BODY : "<body class=\"ifb-menu-push\">" >
    | < BODY_FIN : "</body>" >
    | < NOMBRE_EMPRESA : "<td class=\"name\">" >
    | < COTIZACION_EMPRESA : "<td class=\"price flop\">" >
    | < A_FIN : "</a>" >
    | < ETIQUETA : "<" >
    | < ETIQUETA_FIN : ">" >
    | < BARRA : "/" >
    | < NUMERO: (["0"-"9"])* ( "," )? (["0"-"9"])+ >
    | < CARACTERES : ([ "A"-"Z", "a"-"z", "0"-"9", "Á", "É", "Í", "Ó", "Ú", "Ü", "Ñ",
    "á", "é", "í", "ó", "ú", "ü", "ñ", "¡", "!", "€", ".", "¿", "?", ":", ";", ",",
    "'", "=", "\"", "-", "_", "+", "º", "*", "(", ")", "\\", "@", "%", "#", "&", "[",
    "]", "|", "{", "}", "$" ])+ >
    | < TABLE : "<table class=\"fullTable\" width=\"100%\" cellspacing=\"0\" cellpadding=\"0\" border=\"0\">" >
    | < TBODY : "<tbody>" >
    | <TABLE_FIN : "</table>" >
    | <TD_FIN : "</td>" >
}

/// Funcion para leer la tabla de cotizaciones de la página web
Hashtable<String, Double> leeTablaCotizaciones() :
{
    Hashtable<String, Double> tabla = null;
}
{
    <CABECERA> <HTML> <HEAD> saltar() <HEAD_FIN> tabla = body() <HTML_FIN>
    {
        return tabla;
    }
}

/// Función para saltar la parte no importante hasta la tabla (skip lo que sea --> Comodín)
void saltar() :
{}
{
    ( <CARACTERES> | <NUMERO> | <ETIQUETA> | <ETIQUETA_FIN> | <BARRA> | <A_FIN> )*
}


/// Función para obtener el cuerpo de la tabla
Hashtable<String, Double> body() :
{
    Hashtable<String, Double> tabla = null;
}
{
    <BODY> saltar() tabla = cotizaciones() <BODY_FIN>
    {
        return tabla;
    }
}

/// Función para obtener la cotización de la empresa con nombre = NOMBRE_EMPRESA
Hashtable<String, Double> cotizaciones() :
{
    Hashtable<String, Double> tabla = new Hashtable<String, Double> ();
    String empresa = null;
    double cotizacion = 0;
}
{
     <TABLE> saltar() <TBODY> (empresa = empresa() cotizacion = cotizacion()
     { tabla.put(empresa, cotizacion);}
     saltar())+ <TABLE_FIN>
    {
        return tabla;
    }
}

/// Función para obtener el nombre de la empresa
String empresa() :
{
    StringBuilder nombreCompleto = new StringBuilder();
    String nombre = null;
}
{
    <NOMBRE_EMPRESA> <ETIQUETA> ( <CARACTERES> | <BARRA> )* <ETIQUETA_FIN>
    (
        nombre = <CARACTERES>
        {nombreCompleto.append(nombre);}
    )+
    <A_FIN><TD_FIN>
    {
        return nombreCompleto;
    }
}

/// Función para obtener la cotizacion de una empresa
Double cotizacion() :
{
    Double cotizacion = 0;
}
{
    <COTIZACION_EMPRESA>
    (
        cotizacion = <NUMERO>
    )
    <TD_FIN>
    {
        return cotizacion;
    }
}